import { writeFileSync } from "fs";
import { zodToTs } from "zod-to-ts";
import * as taskValidation from "../lib/validation/tasks";
import * as projectValidation from "../lib/validation/projects";
import * as journalValidation from "../lib/validation/journal";
import * as habitValidation from "../lib/validation/habits";
import * as enums from "../lib/types/enums";

// Generate types for each schema
const schemas = {
  // Task types
  CreateTaskInput: taskValidation.createTaskSchema,
  UpdateTaskInput: taskValidation.updateTaskSchema,
  TaskStatus: enums.taskStatusSchema,
  TaskPriority: enums.taskPrioritySchema,

  // Project types
  CreateProjectInput: projectValidation.createProjectSchema,
  UpdateProjectInput: projectValidation.updateProjectSchema,
  ProjectStatus: enums.projectStatusSchema,

  // Journal types
  CreateJournalInput: journalValidation.createJournalSchema,
  UpdateJournalInput: journalValidation.updateJournalSchema,
  MoodType: enums.moodTypeSchema,

  // Habit types
  CreateHabitInput: habitValidation.createHabitSchema,
  UpdateHabitInput: habitValidation.updateHabitSchema,
};

// Generate TypeScript types
let output = "// Generated by scripts/generate-types.ts\n\n";

Object.entries(schemas).forEach(([name, schema]) => {
  const { node } = zodToTs(schema, name);
  output += `${node}\n\n`;
});

// Write to file
writeFileSync("lib/types/generated.ts", output);
console.log("âœ¨ Generated TypeScript types from Zod schemas");